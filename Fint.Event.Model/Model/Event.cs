using System;
using System.Collections.Generic;

namespace Fint.Event.Model
{
    /// <summary>
    ///  An Event object is created at the consumer interface and sent back to either the cache or the provider. After the
    /// event is processed it is sent back to the consumer interface. The Event object is at part of the
    /// eventually consistent pattern the<b> felleskomponent</b> is build on.
    /// </summary>
    public class Event<T>
    {
        /// <summary>
        /// A unique id for an event. It should be a UUID generated by <code>UUID.randomUUID().toString()</code>
        /// </summary>
        public string CorrId { get; set; }

        /// <summary>
        /// This should be the command we wish to execute at the provider or cache.
        /// For example it could be<code> GET_ALL_EMPLOYEES</code>
        /// </summary>
        public string Action { get; set; }

        /// <summary>
        /// The operation to be performed on the data.
        /// </summary>
        public Operation? Operation { get; set; }

        /// <summary>
        /// Status of the event. See {@link Status} for more informasjon.
        /// </summary>
        public Status Status { get; set; }

        /// <summary>
        /// The time of the creation of the event. It should be a Unix timestamp.
        /// </summary>
        public long Time { get; set; }

        /// <summary>
        /// Id of the organization the event is from.
        /// </summary>
        public string OrgId { get; set; }

        /// <summary>
        /// The name of the <em>felleskomponent</em> the event is for.
        /// </summary>
        public string Source { get; set; }

        /// <summary>
        /// The name of the client who generated the event. It should either be the name associated the the API token or
        /// <b>CACHE</b>
        /// </summary>
        public string Client { get; set; }

        /// <summary>
        /// This message should be set if something goes wrong. It should typically describe what went wrong,
        /// for example a stack trace or an error message.
        /// </summary>
        public string Message { get; set; }

		/// <summary>
		/// The query value is set when the consumer needs to send a value to the provider and adapter.
		/// </summary>
		public string Query { get; set; }

        /// <summary>
        /// This is the list of payload/data for the event.
        /// <ul>
        ///  <li>For inbound events it should be queryfilters or data to be updated.</li>
        ///  <li>For outbound events it should be the data requested or the status of the updatecommand</li>
        /// </ul>
        /// </summary>
        /// 
        public List<T> Data { get; set; }

        /// <summary>
        /// Shows the status of the event that was processed by the adapter.
        /// </summary>
        public ResponseStatus? ResponseStatus { get; set; }

        /// <summary>
        /// This status code should be set to some code that can be used to trace the origin of 
        /// the error in the back end system.
        /// </summary>
        public string StatusCode { get; set; }

        /// <summary>
        /// Shows the problems the system has found when processing this event's request.
        /// </summary>
        public List<Problem> Problems { get; set; }

        /// <summary>
        /// Default constructor that create an empty Event object.
        /// </summary>
        public Event()
        {
            //Data = new List<string>();
        }

        public Event(string orgId, string source, string action, string client)
        {
            OrgId = orgId;
            Source = source;
            Action = action;
            Client = client;

            Status = Status.NEW;
            CorrId = Guid.NewGuid().ToString();
            Time = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
            Data = new List<T>();
        }

        public Event(string orgId, string source, Enum action, string client) : this(orgId, source, action.ToString(), client)
        {
        }

        public bool IsHealthCheck()
        {
            return DefaultActions.HEALTH.ToString().Equals(Action);
        }

        public bool IsRegisterOrgId()
        {
            return DefaultActions.REGISTER_ORG_ID.ToString().Equals(Action);
        }

        public override string ToString()
        {
            return "Event{" +
               "corrId='" + CorrId + '\'' +
               ", action='" + Action + '\'' +
               ", status=" + Status +
               ", time=" + Time +
               ", orgId='" + OrgId + '\'' +
               ", source='" + Source + '\'' +
               ", client='" + Client + '\'' +
               ", message='" + Message + '\'' +
			   ", query='" + Query + '\'' +
			   ", data='" + Data + '\'' +
               '}';
        }
    }
}
